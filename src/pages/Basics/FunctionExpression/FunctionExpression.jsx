import React from 'react'
import one1 from "./img/1.jpg"
import one2 from "./img/2.jpg"
import one3 from "./img/3.jpg"
import one4 from "./img/4.jpg"
import one5 from "./img/5.jpg"
import one6 from "./img/6.jpg"
import one7 from "./img/7.jpg"
import one8 from "./img/8.jpg"
import one9 from "./img/9.jpg"
import one10 from "./img/10.jpg"
import one11 from "./img/11.jpg"
import one12 from "./img/12.jpg"
import one13 from "./img/13.jpg"
import one14 from "./img/14.jpg"
import one15 from "./img/15.jpg"
import one16 from "./img/16.jpg"
function FunctionExpression() {
    return (
        <div>
            <h1>Expression Ֆունկցիաներ</h1>
            <p>
                JavaScript-ում ֆունկցիաները ոչ թե կախարդական լեզվական կառուցվածք է, այլ հատուկ տեսակի արժեք
            </p>
            <p>
                գրելաձևը որը օգտագործել էինք մինչ այս պահը կոչվում է Function Declaration  (Ֆունկցիայի հայտարարում)
            </p>
            <img src={one1} />
            <p>
                Գոյություն ունի ևվս մեկ ֆունկցիայի հայտարարաման գրելաձև որը կոչվում է Function Expression
                (Ֆունկցիոնալ արտահայտություն)
                նման սինտաքսը թույլ է տալիս ստեղծել նոր ֆունկցիա ցանկացած արտահայտության կեսից
                Սինտաքսը
            </p>
            <img src={one2} />
            <p>
                այստեղ մենք կարող ենք տեսնել sayHi փոփոխականը որը ստանում է նոր ստեղծված ֆունկցիան որպես արժեք function()  alert("Привет");
                Քանի որ ֆունկցիայի ստեղծումը տեղի է ունենում նշանակման արտահայտության համատեքստում (=- ի աջ կողմում), Դա ֆունկցիայի արտահայտություն է
            </p>
            <p>
                Ուշադրություն դարձրեք այն փաստին function հատուկ բառից հետո ֆունկցիայի անունը գրված չէ  Function Expression դա թույլատրելի է
            </p>
            <p>
                այստեղ մենք միանգամից ֆունկցիան վերագրում ենք sayHi փոփոխականի մեջ
            </p>
            <p>
                ավելի բարդ իրավիճակներում որին մենք կհանդիպենք ավելի ուշ Ֆունկցիան կարող է ստեղծվել և միանգամից կանչվել կամ նրա կանչը պլանավոր էլ մի փոքր ուշ , այդ ֆունկցիան ոչմի տեղ չի պահպանվի
                նման դեքում կդառնա անանուն ֆունկցիա
            </p>
            <h3>Ֆունկցիան դա արժեք է </h3>
            <p>
                եկեք կրկնենք կապ չունի թէ ֆունկցիան ոնց է ստեղծվ էլ նա միևնույն է համարվում է արժեք վերևում գրված երկու օրինակներում այն պահպանվում է sayHi փոփոխականի մեջ
            </p>
            <p>
                Մենք նույնիսկ կարող ենք տեսն ել այդ արժեքը alert օգնությամբ
            </p>
            <img src={one3} />
            <p>
                Ուշադրություն դարձրեք որ վերջին տողը չի կանչում ֆունկցիան քանի որ sayHi ից հետո չկա կլոր փակագիծը
            </p>
            <p>
                JavaScript Ֆունկցիաները դրանք արժեքներ են այդ իսկ պատճառով մենք կարողենք նրան դիմել որպես արժեք
                վերևում գրված կոդը ցույց է տալիս ֆունկցիայի մարմնում գրված կոդը որպես Տողային տիպ
            </p>
            <p>
                իհարկ է ֆունկցիան դա հատուկ արժեք է քանի որ մենք կարողենք կանչել նրան sayHi()
                բայց վերջիվերջո այն արժեք է և մենք կարողենք նրա հետ աշխատել ինչպես մնացած արժեքների հետ
            </p>
            <p>
                մենք կարող ենք պատճենել ֆունկցիան այլ փոփոխականի մեջ
            </p>
            <img src={one4} />
            <p>
                Եկեք մանրամասն վերլուծենք այն ամենը, ինչ տեղի է ունեցել այստեղ
            </p>
            <li>1.Function Declaration ի հայտարարումը (1) տողում ստեղծում է ֆունկցիա և նրան տեղադրում է sayHi փոփոխականի մեջ</li>
            <li>2, 2րդ տողում (2) մենք պատճենումենք նրա արժեքը func փոփոխականի մեջ Եվս մեկ անգամ
                Ուշադրություն դարձրեք կլոր փակագծեր չկան sayHi ից հետո
                եթե նրանք լինեին func = sayHi() արտահայտության մեջ ապա func մեջ կպահպանվեր sayHi() ֆունկցիայի վերադարձրած արժեքը այլ ոչ թե sayHi ֆունկցիան
            </li>
            <li>Հիմա ֆունկցիան կարողէ կանչվել ոչ միայն sayHi() ով այլ նաև  func()</li>
            <p>
                այստեղ նույնպես մենք առաջին տողում կարող էինք հայտարարել sayHi ֆունկցիան որպես  Function Expression
            </p>
            <img src={one5} />
            <h3>Ինչի համար է պետք կետ ստորակետը դնել վերջում </h3>
            <p>
                ձեր մոտ կարող է հարց առաջանալ ինչու  Function Expression - ի ժամանակ դրվում է կետ ստորակետ ; իսկ  Function Declaration ժամանակ ոչ
            </p>
            <img src={one6} />
            <p>
                պատասխանը պարզ է Function Expression այստեղ ստեղծվում է որպես ֆունկցիա function(...) որը վերագրվում է let sayHi փոփոխականի մեջ Իսկ կետ ստորակետ խորհուրդ է տրվում դնել արտահայտության վերջում նա չի համարվում ֆունկցիայի գրելաձև
                կետ ստորակետը պետք է այնտեղ որտեղ կա պարզ վերագրում այնպես ինչպեսին է let sayHi = 5; ինչպես նաև ֆունկցիայի վերագրման ժամանակ
            </p>
            <h2>CallBack Ֆունկցիա </h2>
            <p>
                Դիտարկենք ֆունկցիան որպես արժեք փոխանցելու և ֆունկցիայի արտահայտություններ օգտագործելու ավելի շատ օրինակներ:
            </p>
            <p>
                եկեք գրենք ֆունկցիա ask(question, yes, no) երեք պարամետրնորով
            </p>
            <p>
                question - հարցի տեքստը
            </p>
            <p>
                yes - Ֆունկցիա որը կկանչվի այն ժամանակ երբ պատասխանը լինի   «Yes»
            </p>
            <p>
                no - Ֆունկցիա որը կկանչվի այն ժամանակ երբ պատասխանը լինի   «No»
            </p>
            <p>
                Մեր ֆունկցիան պետք է հարց տա օգտագործողին question, և կախված թե ինչ պատասխան կտա օգտագործողը կկանչվի yes() կամ no()
            </p>
            <img src={one7} />
            <p>
                Պրակտիկայում նման ֆունկցիաները շատ օգտակար են
                Հիմնական տարբերությունը մեր ask ֆունկցիայի կայանում է նրանում որ նա օգտագործում է
                ավելի բարդ կոնստրուկցիա օգտագործողի հետ կապի մտնելու համար քան սովորական confirm ֆունկցիան որը մեզ տալիսէ Բռաուզեռի Api
            </p>
            <b>
                showOk և showCancel արգումենտերը ask ֆունկցիայում կոչվում են CallBack Ֆունկցիա կամ ուղակի CallBack
            </b>
            <p>
                հիմնական գաղափարը նա է որ մենք փոխանցում ենք ֆունկցիան և սպասում ենք որ նա հետ կկանչվի (անգլերենից թարգմանված «call back» նշանակում է հետ կանչվող )
                ինչ որ ժամանակ հետո երբ դրա անրաժեշտությունը լինի
                Մեր դեպքում showOk դառնում է CallBack «yes» պատասխանի համար իսկ showCancel «no» պատասխանի համար
            </p>
            <p>
                մենք կարողենք օգտագործ ել այս օրիանկը ավելի կարճ գրելաձևով օգտագործելով  Function Expression
            </p>
            <img src={one8} />
            <p>
                այստեղ ֆունկցիաները հայտարարվում են ask(...) ֆունկցիայի կանչի ժամանակ Նրանք չուն են անուն այդ իսկ պատճառով նրանք կոչվում են անանուն ֆունկցիա
                նման ֆունկցաիները ask ից դուրս հասանելի չեն քանի որ նրանք վերագրված չեն փոփոխականներ մեջ բայց դա այն է ինչ մեզ հարկավոր է
            </p>
            <h3>
                Ֆունկցիան դա արժեք է ինֆորմացիան ներկայացնելով
            </h3>
            <p>
                սովորաբար արժեքները ինչպիսին են տեղերը կամ թվերը իրենցիցի ներկայացնում են ինֆորմացիա
            </p>
            <p>
                Մյուս կողմից ֆունկցիաները պետք է ընդունել որպես գործողություն
            </p>
            <p>
                Մենք կարող ենք դրանք փոփոխականից փոփոխական փոխանցել և գործարկել երբ ցանկանանք:
            </p>
            <h3>Function Expression ընդեմ Function Declaration ի</h3>
            <p>եկեք տեսնենք հիմնական տարբերություները Function Expression և Function Declaration ի</p>
            <p>Առաջին հերդին գրելաձևը նրանց տարբերում է կոդում</p>
            <li>Function Declaration: ֆունկցիայի է որը գրվում է function հատուկ բառով որը տարբերում է մնացած կոդից</li>
            <img src={one9} />
            <li>Function Expression: Ֆունկցիայի է որը գտնվում է մեկ այլ արտահայտության մեջ Մեր օրինակում ֆունկցիան ստեղծվում է = աջ կողմում </li>
            <img src={one10} />
            <p>
                Ավելի նուրբ տարբերությունն այն է, երբ ֆունկցիան ստեղծվում է JavaScript շարժիչով
            </p>
            <h3>Function Expression-ը ստեղծվում է, երբ կոդի կատարումը հասնում է դրան, և այնուհետև այն կարող է օգտագործվել</h3>
            <p>
                այն բանից հետո երբ կատարման հոսքը հասնում է կատարման աջ կողմին let sum = function,
                այդ պահից սկսած ֆունկցիան համարվում է ստեղծված և կարող է օգտագործվել (վերագրվում է փոփոխականի մեջ, կանչվում է և այլն )
            </p>
            <p>
                Function Declaration դեպքում հակառակն է
            </p>
            <h3>
                Function Declaration ը կարող է կանչվել ավելի վաղ քան այն հայտարրավել է
            </h3>
            <p>
                այլ կերպ ասած երբ JavaScript ի դվիժոկը պատրաստվում է կատարել սկրիպտը կամ կոդի բլօկը , մինչ այդ նա որոնում է կոդում կամ սկրիպտում Function Declaration երը և ստեղծում է այդ ֆունկցիաները
                այս պրոցեսը կարելի է համարել սկզբնավորման փուլ
            </p>
            <p>
                և միայն այն բանից հետո , երբ բոլոր Function Declaration կլին են վերամշակված, նոր կշարունակվի կոդի կատարումը
            </p>
            <p>
                արդույնքում Function Declaration ով ստողծված ֆունկցիաները կարողենք կանչվել ավլի վերև քան նրանց հայտարումը
            </p>
            <p>ներքևում գրված կոդ կաշխատի </p>
            <img src={one11} />
            <p>
                sayHi ֆունկցիան ստեղծվել է երբ JavaScript ի դվիժոկը պատրաստում է աշխատացնել սկրիպտը և նման ֆունկցիան տեսանելի է այդ սկրիպտի ցանկացած վայրում
            </p>
            <p>
                եթե նման իրավիճակում լինի  Function Expression ը ապա կոդը կտա սխալ
            </p>
            <img src={one12} />
            <p>
                Function Expression ով հայտարարաված ֆունկցիաները ստեղծվում են այն ժամանակ երբ կոդի կատարումը հասնում է նրանց
                դա տեղի է ունենում (*) տողում, ավելի ուշ քան այն կանչվել է
            </p>
            <p>
                ևվս մեկ կարևոր առանձնահատկություն երից մեկը Function Declaration ի կայանում է նրա Բլօկ տեսանելիության մեջ
            </p>
            <b>Խիստ ռեժիմի ժամանակ երբ Function Declaration ը գտնվում է բլոկում { } Ֆունկցիան հասանելի է այդ բլոկում ցանակացած տեղ բայց բլօկից դուրս հասանելի չէ </b>
            <p>Օրինակի համար եկեք պատկերացնենք որ մեզ պետք է հայտարարելwelcome() ֆունկցիան կախված age փոփոխականից
                որը մենք կստանանք կոդի կատարման ժամանակ և հետո կպլանավորենք օգտագործել այն ինչ որ ժամանակ ապագայում
            </p>
            <p>
                եթե մենք փորձենք օգտագործելFunction Declaration ը այն չի աշխատի այնպես ինչպես մենք պլանավորելե էինք
            </p>
            <img src={one13} />
            <p>
                այս սխալը տեղի ունեցավ այն պատճառով քանի որ Function Declaration տեսանելի է այն բլօկի ներսում որտեղ այն հատարարվել է
                Ահա ևվս մեկ օրինակ
            </p>
            <img src={one14} />
            <p>
                Ինչ կարելի է անել որ welcome տեսանելի լինի if բլօկից դուրս 
                Այստեղ ճիշտ կլինի օգտագործել ֆունկցիա որը կհայտարարենք Function Expression գրելաձևով և welcome փոփոխականը հայտարարենք if բլօկից դուրս որպիսզի կարողանաք ապահովել մեզ պետքական հասանելիության տիրույթը
            </p>
            <p>
                Նման կոդը կաշխատի այնպես ինչպես մեզ պետք է 
            </p>
            <img src={one15} />
            <p>այս կոդը մենք կարողենք ել ավլի հեշտացնել օգտագործելով ? պամանի օպերատորը</p>
            <img src={one16} />
        </div> 
    )
}

export default FunctionExpression