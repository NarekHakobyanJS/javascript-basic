import React from 'react'
import one from "./img/1.jpg"
import two from "./img/2.jpg"
import three from "./img/3.jpg"
import fore from "./img/4.jpg"
import fife from "./img/5.jpg"
import sex from "./img/6.jpg"
import seven from "./img/7.jpg"
import ene from "./img/8.jpg"
import nane from "./img/9.jpg"
import then from "./img/10.jpg"
import one1 from "./img/11.jpg"
import one2 from "./img/12.jpg"
import one3 from "./img/13.jpg"
import one4 from "./img/14.jpg"
import one5 from "./img/15.jpg"
import one6 from "./img/16.jpg"
import one7 from "./img/17.jpg"
import one8 from "./img/18.jpg"
import one9 from "./img/19.jpg"
import one10 from "./img/20.jpg"
import one11 from "./img/21.jpg"

function LogicalOperators() {
    return (
        <div>
            <h1>Տրամաբանական օպերատորներ</h1>
            <p>
                JavaScript ում գոյություն ունեն 4 Տրամաբանական օպերատորներ
                <ul>
                    <li>|| կամ</li>
                    <li>&& և </li>
                    <li>! Ոչ</li>
                    <li>?? զրոյական միաձուլման օպերատոր</li>
                </ul>
            </p>
            <p>
                Չնայած անվանմանը այս օպերատորները կարողեն աշխատել ցանկացած
                տիպային արժեքների հետ Ստացած արժեքը նույնպես կարողեն լինել տարբեր տիպեր
            </p>
            <h3> || Կամ</h3>
            <p>
                Կամ Օպերատորը իրենից ներկայացնում է 2 ուղղայաց գիծ
            </p>
            <img src={one} />
            <p>
                Սովորաբար ծրագրավորման մեջ Կամ օպերատորը նխատեսված է միայն
                Բուլյան օպերատորների հետ գործողություն կատարելու համար
                Եթե արգումենտներից մեկը true է այն կվերադարձնի true
                հակառակ դեպքում false.
            </p>
            <p>
                JavaScript ում ինչպես հետո կտեսնենք այս օպերատրորը աշխատում է միքիչուրիշ
                ձև Բայց մինչ այդ եկեք տեսնենք ինչ է կատարվում Բուլյան արժեքների հետ
                գոյություն ունի ընդամնեը 4 տրամաբանական կոմբինացիա
            </p>
            <img src={two} />
            <p>
                Ինչպես նկատեցինք բոլոր օպերացիաները հավասարեն true ի
                բացի այն դեպքից երբ երկու արգումենտներնել   false են

                եթե արժեքները Բուլյան տիպ չեն այն նրանց դարձննում է Բուլյան տիպ
                օրինակ 1 թիվը կվերածվի true իսկ false
            </p>
            <img src={three} />
            <p>
                Սովորաբար Կամ օպերատորը || բլոկներում պարզելու համար ճշմարիտ է արդյոք գրված պայմաննը
            </p>
            <img src={fore} />
            <p>
                Ինչպես նաև կարողենք փոխանցել ավելի շատ պայման
            </p>
            <img src={fife} />
            <p>
                Ինչպես նաև կարողենք փոխանցել ավելի շատ պայման
            </p>
            <h3>Կամ օպերատորը || գտնում է առաջին ճշմարիտ արժեքը </h3>
            <p>
                վերվում նշված օրինակները համապատասխանում են ընդհանուր գաղափարին
                ՀԻՄԱ եկեք տեսնենք JavaScript Լեզվի առանձնահհատկությունները
                Ընդլայնված Ալգորիթմը աշխատում է հետևյալ ձև
            </p>
            <p>|| Կամ օպերատորի աշխատանքը մի քանի արժեքների հետ </p>
            <img src={sex} />
            <p>|| Կամ օպերատորի Կատարում է հետևյալ գործողությունները </p>
            <ul>
                <li>Համեմատում է օպերանդները ձախից աջ:</li>
                <li>Ամեն մի օպերանդը դառնում է Բուլյան արժեք Եթե արժեքը ճշմարիտ է այսինքն true
                    ապա դադարեցվում և վերադարձնում է այդ օպերանդի սկզբնական արժեքը:
                </li>
                <li>
                    Եթե բոլոր օպերանդները համարվում են false վերադարձվում է նրանցից վերջինը
                </li>

            </ul>
            <p>
                արժեքը վերադարձնվում է նախնական տեսքով առանց ձևափոխվելու
            </p>
            <p>
                Այլ կերպ ասված Կամ օպերատորի շղթան վարադարձնում է առաջին ճշմարիտ արժեքը
                կամ վերջինը եթե ճշմարիտ արժեք գոյություն չունի
            </p>
            <img src={seven} />
            <p>
                Սա թույլ է տալիս օպերատորի ավելի հետաքրքիր կիրառություններ, քան «մաքուր, ավանդական, միայն բուլյան ձևով»:
            </p>
            <h3>
                Ստանալով առաջին իսկական արժեքը փոփոխականների կամ արտահայտությունների ցանկից:
            </h3>
            <p>
                ենթադրենք մենք ունենք մի շարք փոփոխականներ որոնք կարողեն պարունակել ցանակացած արժեք ինչպես նաև 
                null/undefined ինչպես կդրսեվորի իրեն Կամ օպերատոր
            </p>
            <img src={ene} />
            <p>
                եթե currentUser, և defaultUser լինեին կեղծ ապա այդ դեպքում մենք կստանայինք "unnamed" այս տեքստը 
            </p>
            <p>
                օպերանդները կարողեն լինել ինչպես առանձին արժեք այնպես ել կամայական արտահայտություն 
                ԿԱՄ || օպերատորը ստուգում է նրանց ձախից աջ,
                գործողությունը դադարեցվում է երբ կամ օպերատորը հանդիպում է առաջին ճշմարիտ արժեքին 
                այս գործողություն կոչվում է կրճատ հաշվարկ քանի որ մյուս օպերանդը ստուգվում է այն ժամանակ երբ առաջին օպերանդը չի համապատասխանում իրավաիճակին
            </p>
            <p>
                դա լավ նկատելի է երբ որպես երկրորդ արգումենտ տրված արտահայտությունն ունի կողմնակի ազդեցություն, օրինակ՝ փոփոխական փոխելը:
            </p>
            <img src={nane} />
            <p>
            Եթե ​​առաջին փաստարկը կեղծ էր, ապա || կանցնի երկրորդի հաշվարկին և կկատարի հանձնարարության գործողությունը.
            </p>
            <img src={then} />
            <p>
                ինչպես նկատում ենք  || համարվում է if ի անալոգային
                Առաջին օպերանդը դառնում է Բուլյան և եթե այն false Կատարվում է հաջորդ բլօկը 
            </p>
            <h3>և && Օպերատորը</h3>
            <p>
            և Օպերատորը գրվում է որպես երկու Ամպերսանդի նշանով
            </p>
            <img src={one1} />
            <p>
                Ընդանրապես ծրագրավորման մեջ և օպեռատորը վերադարձնում է true եթե բոլոր օպեռանդները ճշմարիտ են հակառակ դեպքում վերադարձնում է false

            </p>
            <img src={one2} />
            <p>
                if օպեռատորի հետ
            </p>
            <img src={one3} />
            <p>
                ինպես Կամ օպերատորի դեպքում և օպերատորը նույնպես արժեքները վերածում է Բուլյան տիպի 
            </p>
            <p>
            և օպերատորի մի քանի համամատությունները
            </p>
            <img src={one4} />
            <h3>և && Օպերատորը գտնում է առաջին կեղծ արժեքը </h3>
            <p>
                և օպերատորը կատարում է հետևյալ գործողությունները
            </p>
            <ul>
                <li>Ստուգում է օպեռանդները ձախից աջ</li>
                <li>Ամեն Օպեռանդ դառնում է Տրամաբանական տիպ եթե արժեքը false է, ստուգումը դադարեցվում է և վերադարձվում է ստվյալ օպեռանդի նափնական արժեքը </li>
                <li>Եթե բոլոր օպեռանդերը true են վերադարձվում է վերջինը </li>
            </ul>
            <p>
                այլ կերպ ասած և օպերատորը վերադարձնում է առաջին կեղծ արժեքը կամ վերջինը եթե արտահայտության մեջ կեղծ արժեք չի գտննվել
            </p>
            <p>
                և օպերատորը && շատ նման է || կամ օպերատորին Տարբերությունը նա է որ և && Օպերատորը վերադարձնում է առաջին կեղծ false արժեքը իսկ Կամ || օպերատոր վերադարձնում առաջին true արժեքը 
                ՕՐԻՆԱԿ
            </p>
            <img src={one5} />
            <p>
                կարողենք փոփանցել մի քանի գործողություն միանգամից այս դեպքում երբ գտնվի առաջին կեղծ արժեքը գործողությունը կդադարեցվի և կվերադարձվի այդ արժեքը 
            </p>
            <img src={one6} />
            <p>
                եթե բոլոր արժեքներ ճշմարիտ են ապա վերադարձնվում է նրանցից վերջինը 
            </p>
            <img src={one7} />
            <h2>&& օպերատորի առաջնահերդությունը ավելի բարձր է քան || օպերատորինը</h2>
            <p>
            && օպերատորի առաջնահերդությունը ավելի բարձր է քան || օպերատորինը այնպես որ  && օպերատորը ավել վաղ կկատառվի քան || կամ օպերատորը 
            </p>
            <p>
                այս կոդում a && b || c && d հերդականությունը կլինի նունը ինպես օրինակ && օպերատորները լինեին փակագծերի մեջ (a && b) || (c && d)
            </p>
            <p>|| և && օպերատորները հաճախ փոփարինում են if ին</p>
            <img src={one8} />
            <p>
            && ի աջ կողմի գործողությունը կկատարվի այն պարագայում երբ միայն գործողությունը հասնի նրան 
            այսինքն alert կաշխատի այն դեպքում երբ աջ կողմի գործողությունը  (x ավելի մեծ է 0) արտահայտությունը լինի ճշմարիտ 
            </p>
            <h3>! ոչ օպեռարտորը </h3>
            <p>
                Ոչ ի օպերատորը իրենից ներկայացնում է ! նշանը 
            </p>
            <img src={one9} />
            <p>
                ! Օպեռատորը ընդոնում է մի արգում ենտ և կատարում է հետևյալ գործողությունները 
            </p>
            <ul>
                <li>Սկզբում օպերատորը արգումենտը դարձնում է Բուլյան տիպ true/false </li>
                <li>իսկ հետո վերադարձնում է դրա հակառակ արժեքը </li>
            </ul>
            <p>օրինակ</p>
            <img src={one10} />
            <p>Հաճախ երկուական Ոչ ը  !! օգտագործվում է որպիսի արժեքը դարձնենք Բուլիան տիպ </p>
            <img src={one11} />
            <p>
            Այսինքն՝ առաջինը Ոչ ը փոխակերպում արժեքը բուլյան և վերադարձնում է հակառակը, իսկ երկրորդը նորից Ոչ ը շրջում։ Վերջում մենք ունենք պարզ արժեքից բուլյան փոխակերպում:
            </p>
            <h3>! Օպեռատորը ունի ամենաբարձր առաջնահերդությունը տրամաբանական օպերատորներ մեջ դրա համար այն միշտ կկատարվի առաջինը</h3>
        </div>
    )
}

export default LogicalOperators