import React from 'react'
import one from "./img/1.jpg"
import two from "./img/2.jpg"
import three from "./img/3.jpg"
import fore from "./img/4.jpg"
import fife from "./img/5.jpg"
import sex from "./img/6.jpg"
import seven from "./img/7.jpg"
import ene from "./img/8.jpg"
import nine from "./img/9.jpg"
import then from "./img/10.jpg"
import one1 from "./img/11.jpg"
import one2 from "./img/12.jpg"
import one3 from "./img/13.jpg"
import one4 from "./img/14.jpg"
import one5 from "./img/15.jpg"
import one6 from "./img/16.jpg"
import one7 from "./img/17.jpg"
import one8 from './img/18.jpg'
import one9 from "./img/19.jpg"
import one10 from "./img/20.jpg"
import one11 from "./img/21.jpg"
import one12 from "./img/22.jpg"
import one13 from "./img/23.jpg"
import one14 from "./img/24.jpg"
import one15 from "./img/25.jpg"
import one16 from "./img/26.jpg"
function Cycle() {
    return (
        <div>
            <h1>while և for Ցիկլները</h1>
            <p>
                Հաճախ կոդ գրելուց մենք հանդիպում ենք խնդրի
                որ Նույնատիպ կոդը պետքե գրվի մի քանի անգամ
            </p>
            <p>
                Օրինակ մեկը մյուսի հետևից ցույց տալ ապրանքերը կամ տպել 1 ից 20
                թվերը և այդ թվերի համար կատարել նույն գործողությունները
            </p>
            <p>
                Այս խնդիրները լուծելու համար օգտագործում ենք Ցիկլներ
            </p>
            <h3>Ցիկլ «while» </h3>
            <p>
                Ցիկլ «while» ունի հետևյալ սինտաքսը
            </p>
            <img src={one} />
            <p>
                Ցիկլի մարմնում գտնվող կոդը կաշխատի այնքնա ժամանակ մինչ պայմանը condition ճշմարիտ է
            </p>
            <p>
                Օրինակ ներքևում գրված ցիկլը կտպի i քանի դեռ i ավելի փոքր է 3 ից
            </p>
            <img src={two} />
            <p>
                Ցիկլի մարմնում տեղի ունցող մի գործընդացը համարվում է ԻՏԵՐԱՑԻԱ, և այսպես վերևում գրված ցիկլը կատարում է 3 ԻՏԵՐԱՑԻԱ
            </p>
            <p>
                Եթե վերևում գրված ցիկլի մեջ i++ տողը բացակայեր այդ դեպքում Ցիկլը կրկնվեր անվերջ,
                բայց պրակտիկայում Բռաուզերը դա թույլ չեր տա , այն օգտագործողին թույլ է տալիս կանգնացնել подвисший կախված սկրիպտը
                իսկ սերվերի կողմից JavaScript-ը ստիպված կլինի «սպանել» գործընթացը
            </p>
            <p>
                Ցանկացած արտահայտություն կամ փոփախական կարող է հանդես գալ որպես ցիկլի պայման
                while ցիկլը հաշվարկվում և փոխարկվում է բուլյան արժեքի:
            </p>
            <p>
                Օրինակ while (i) ավելի կարճ ձևն է while (i != 0) այս սինտաքսի
            </p>
            <img src={three} />
            <h3>Ձևավոր փակագծերը պարտադիր չեն ցիկլի մարմնում եթե այն մի տողում է </h3>
            <p>Եթե ցիկլի մարմինը կատարում է ընդամենը մի գործընդացը ապա մենք կարողենք ձևավոր փակագծերը անտեսել</p>
            <img src={fore} />
            <h3>«do…while» Ցիկլը </h3>
            <p>
                Պայմանի ստուգումը կարողենք տեղադրել ցիկլի մարմնում օգտագործելով հատուկ գրելաձև do..while
            </p>
            <img src={fife} />
            <p>
                Ցիկլը նախ կկատարի մարմնում գտնվող արտահայտությունը ապա նոր կստուգի պայմանը condition ը և քանի դեռ արժեքը հավասար է true ի
                այն կկատարվի նորից ու նորից
                Օրինակ
            </p>
            <img src={sex} />
            <p>
                Շարահյուսության այս ձևը հիմնավորված է, այն դեպքում երբ դուք ցանկանում եք որ ցիկլի մարմինը կատարվի գոնե մի անգամ նույնիսկ այն դեպքում երբ այն լինի Կեղծ
            </p>
            <p>Գործնականում ավելի հաճախ օգտագործվում է նախապայմանով ձևը։ while(…) { }</p>
            <h3>Ցիկլ «for»</h3>
            <p>
                Ավելի բարդ բայց նաև ամենատարածված ցիկլը դա for ցիկլն է
            </p>
            <img src={seven} />
            <p>
                եկեք հասկանաք ամեն քայլը , Ներքևում գրված օրինակում կկատարվի alert(i) i համար 0 ից մինչև 2 չներառելով 3 ը
            </p>
            <img src={ene} />
            <p> եկեք նայենք for ի կոնստրուկցիան ավելի կոնկրետ </p>
            <img src={nine} />
            <p>
                Ցիկլի աշխատանքի ալգորիտմը հետևյալն է
            </p>
            <img src={then} />
            <p>
                Այսինքն սկզբում կկատարվի մի անգամ, իսկ հետո ամեն ԻՏԵՐԱՑԻԱ սկսլումէ ստուգել պայմանը ,
                որից հետո կատարվում է մարմնում գրված կոդը հետո նոր քայլը
            </p>
            <p>
                ահա ավելի մանրամասն ինչ է տեղի ունենում մեր պարագայում
            </p>
            <img src={one1} />
            <h3>Ներկառուցված փոփախականի թարմացումը </h3>
            <p>
                Այս օրիանկում փոփախական i հայտարարվել է հենց ցիկլում
                այն կոչվում է ներկառուցված փոփախականի թարմացում այդ փոփախականները հասանելի են միայն ցիկլի ներսում
            </p>
            <img src={one2} />
            <p>
                Մենք կարողենք օգտագործել փոփախականը որը արդեն կա քանսթե հայտարարենք նորը
            </p>
            <img src={one3} />
            <h3>«for» Ցիկլի քայլերի բացթողումը </h3>
            <p>
                ցանկացած «for» Ցիկլի մաս կարողենք բաց թողնել
                օրինակ մենք կարողենք բաց թողնել ցիկլի սկիզբը եթե մեզ պետք չե ոչինչ անել ցիլկից առաջ
            </p>
            <img src={one4} />
            <p>
                կարողենք նաև անտեսել քայլը
            </p>
            <img src={one5} />
            <p>
                Սա նմանեցնում է ցիկլին while ին
            </p>
            <p>
                Մենք կարողենք անտեսել բոլոր քայլերը և նման դեպքում կստանանք անվերջ ցիկլ
            </p>
            <img src={one6} />
            <p>
                Այստեղ կետ ստորակետը պարտադիր է ;; հակառակ դեպքում մենք կստանանք սխալ
            </p>
            <h3>Ցիկլի դադարեցումը «break» օգնությամբ</h3>
            <p>
                Սովորաբար ցիկլը դադրում է երբ պայմանը դառնում է false
            </p>
            <p>
                Բայց մենք կարողենք ցիկլից դուրս գալ ցանկացած պահին օգտագործելով break հրամանը
            </p>
            <p>
                Օրինակ, հետևյալ կոդը հաշվարկում է մուտքագրված թվերի գումարը, քանի դեռ այցելուն մուտքագրում է դրանք, և այնուհետև թողարկում.
            </p>
            <img src={one7} />
            <p>
                break հրամանը (*) այս տողում լիովին դադրոցնում է ցիկլի աշխատանքը և անցնում է հաջորդ քայլին այսինքն alert ին
            </p>
            <p>
                Ընդանրապես անվերջական ցիկլը  + break ը հիանալի է այն իրավիճակների համար:
                երբ այն պայմանը, որը պետք է ընդհատվի, գտնվում է ոչ թե ցիկլի սկզբում կամ վերջում, այլ նրա մարմնի մեջտեղում կամ նույնիսկ մի քանի վայրերում:
            </p>
            <h3> continue հրամանի միջոցով անցում հաջորդ ԻՏԵՐԱՑԻԱ ին </h3>
            <p>
                continue հրամանը break հրամանի հեշտացրած տարբերակն է ,
                նրա կատարման ժամանակ ցիկլը չի ընդատվում լռիվ այլ անցում է հաջորդ ԻՏԵՐԱՑԻԱԻՆ եթե պայմանը դեռ հավասար է true ի
            </p>
            <p>
                նրան օգտագործում են երբ հասականալի է որ այդ ԻՏԵՐԱՑԻԱ ժամանակ նա էլ անելիք չունի
            </p>
            <p>
                Օրինակ, ներքևում օգտագործվող ցիկլը շարունակում է արտածել միայն կենտ արժեքներ.
            </p>
            <img src={one8} />
            <p>
                Հավասար արժեքների համար continue հրամանը դադարեցնումա կատարել ցիկլը և անցնումա հաջորդ ԻՏԵՐԱՑԻԱ կատարմանը
                այս դեպքում alert կատարվում է միայն կենտ թվերի համար
            </p>
            <h3>Continue հրամանը թույլ է տալիս խուսափել նորկառուցված կոդերից </h3>
            <p>
                Ցիկլը որը աշխատում է միայն կենտ թվերի հետ կաորղե ունենալ այս տեսքը
            </p>
            <img src={one9} />
            <p>
                Այս կոդը լռիվ համահունչ է continue հրամանի օգտագործմանը,
                այսինքն continue հրամանի օգտագործման փոխարեն այն կարողենք օգտագործել if բլօկում
                բայց նման օգտագործումը կարող է հեշտ ընթեռնելի չլինել
            </p>
            <h3>break/continue հրամաները չենք կարող օգտագործել ? օպերատորի աջ կողմում </h3>
            <p>
                ուշադրություն դարձրեք որ այս սինտաքսային կոնստրուկցիաները չեն համարվում արտհայտություն և չեն կարող օգտագործվել
                Տերանրնի արտահայտություն մեջ ? նման օգտագործումը կհանգեցնի սխալի
            </p>
            <img src={one10} />
            <h3>նշումներ break/continue</h3>
            <p>
                երբեմն անրաժեշտ է դուրս գալ մի քանի ցիկլից միաժամանակ
                օրինակ ներքևի կոդում մենք անցնում ենք i и j ցիկլներով
                խնդրում ենք prompt ի օգնությամբ i и j կորդինատները (0,0) մինչև (2,2)
            </p>
            <img src={one11} />
            <p>
                մեզ պետքե իրավիճակ որը կկայնեցնի մեր ցիկլը երբ օգտագործողը կչեղարկի մուտքագրումը:
            </p>
            <p>
                Սովորաբար break input ից հետո ամբողջովին դադրոցնում է ցիկլը բայց դա հերիք չէ
                պետք է օգտագործել меток նշաններ
            </p>
            <p>
                նշումը ունի նույնացուցիչ տեսք
                երկու կետ ցիկլից առաջ
            </p>
            <img src={one12} />
            <p>
                break կանչը labelName ցիկլլ ներում մանե գալիս մոտակա արտաքին ցիկլը այդ անունով և այն դադարեցնում է
            </p>
            <img src={one13} />
            <p>
                Վերևում գրվածը նշանակում է որ break outer կանչը արտաքին ցիկլը կկանգնացնի նմուշը որի outer
            </p>
            <p>
                այս դեպքում (*) տողի ղեկավարումը կփոխանցվի alert ին
            </p>
            <p>
                նշումը կարելի է գրել վերևի տողում
            </p>
            <img src={one14} />
            <p>
                continue հրամանը նույնպես կարելի է օգտագործել նշաններով այդ դեպքում ցիկլը կանցնի հաջորդ իտերացիային
            </p>
            <h3>նմուշը չի թույլատրում թռնել կոդից կոդ </h3>
            <p>
                նմուշը չի թույլատրում տալ ղեկավարումը կոդի ցանկացած կետին
                օրինակ չկա նման հնարավորություն
            </p>
            <img src={one15} />
            <p>
                break հրամանը պետքե լինի բլօկի ներսում
            </p>
            <img src={one16} />
        </div>
    )
}

export default Cycle