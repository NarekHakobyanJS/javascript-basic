import React from 'react'
import one from "./img/1.jpg"
import two from "./img/2.jpg"
import three from "./img/3.jpg"
import fore from "./img/4.jpg"
import faife from "./img/5.jpg"
import sex from "./img/6.jpg"
import seven from "./img/7.jpg"
import eane from "./img/8.jpg"
import nane from "./img/9.jpg"
import one1 from "./img/10.jpg"
import one2 from "./img/11.jpg"
import one3 from "./img/12.jpg"
import one4 from "./img/13.jpg"
import one5 from "./img/14.jpg"
import one6 from "./img/15.jpg"

function DataTypes() {
  return (
    <div>
        <h1>Տվյալների տեսակները</h1>
        <p>
            Արժեքները JavaScript ում միշտ պատականում են կոնկրետ ինչ որ տվյալների տիպի
            օրինակ դա կարող է լինել տողային կամ թվային տիպ 
        </p>
        <p>
        JavaScript ում գոյություն ունի 8 հիմանկան տվյալների տիպ 
        այս գլխում մենք կդիտենք նրանց ընդհանուր իսկ արդեն մյուս գլուխներում կխոսենք նրանց մասին առանձին
        </p>
        <p>
            Փոփոխականները JavaScript ում կարողենն իրենց մեջ պահել ցանկացած տվյալների տիպ 
            ինչ որ պահին այնտեղ կարող է լինել թվային տիպ իսկ հետո դառնալ տողային տիպ
        </p>
        <img src={one} />
        <p>
            Ծրագրավորման այն լեզուները որտեղ սա հնարավոր է  «dynamically typed» դինամիկ մուտքագրված
            Դա նշանակում է որ կա տվյալների տիպ բայց փոփխակաները կապված չեն նրանցից ոչմեկի հետ
        </p>
        <h3>Թվեր</h3>
        <img src={two} />
        <p>
          Թվային տիպերը (number) իրենցից ներկայացնումեն ինչպես ամբողջ թվեր այնպես էլ ոչ ամբողջական թվեր որոնք բաժանվում են
          կետով
        </p>
        <p>
            գոյություն ունեն մի շարք գործողություներ կապված թվերի հետ 
            օրինակ բազմապատկում *, բաժանում /, գումարում +, հանում - և այլն
        </p>
        <p>
            Բացի սովորական թվերից գոյություն ունեն այպես կոչված "հատուկ թվային արժեքներ" որոնք պատկանում են տվային տիպերին
            Infinity, -Infinity և NaN.
        </p>
        <p>
            1.Infinity իրենից ներկայացնում է մաթեմաթիկական անվերջություն սա համարվում է հատուկ արժեք որը մեծ է ցանկացած թվից 
            մենք կարողենք ստանալ նրան ինչ որ բան բաժանելով 0 ի վրա
        </p>
        <img src={three} />
        <p>կամ դիմել նրան ուղիղ</p>
        <img src={fore} />
        <p>
            2. NaN նշանակում է հաշվարկային սխալ, այն առաջանում է երբ տեղի է ունենում սխալ մաթեմաթիկական հաշվարկ 

        </p>
        <img src={faife} />
        <p>
            NaN ի արժեքը կպչուն է այսինքն ցանկացած մաթեմաթիկական գործողություն NaN ի հետ վեադարձնում է NaN
        </p>
        <img src={sex} />
        <p>
            եթե կոդում մաթեմաթիկական արտահայտության մեջ կա NaN ապա նա տարածվում է ողջ արդյունքի վրա 
            կա միայն մի բացառություն NaN ** 0 = 1
        </p>
        <p>
            մաթեմաթիկական գործողություները անվտանգեն մենք կարողենք անել ամեն ինչ նրանց հետ բաժանել 0 ի դիմենք 
            ոչ թվային արժեքներին 
            Մեր կոդը երբեք չի կանգնի նման դեպերում իսկ ամենավատագույն դեպքում կստատանք NaN որպես արդյունք
        </p>
        <h3>BigInt</h3>
        <p>
            JavaScript ում number տիպը չի կարող անվտանգ աշխատել  այն թվերի հետ որոնք մեծ են քան
            (2․53-1) (կամ 9007199254740991) կամ ավելի փոքր քան -(2․53-1) բացասական թվերի հետ 
            number տիպը կարող է պահպանել ավելի մեժ արժեք (մինչեւ 1.7976931348623157 * 10308)
            բայց դա դուրս է անվտագության միջակայքից ±(2․53-1) 
            թվերից շատերը չեն կարող ներկայացվել տվյալների այս տեսակի միջոցով՝ թվերի ներքին ներկայացման
            պատճառով երկուական ձևով առաջացած սահմանափակումների պատճառով:
            Օրինակ տարօրինակ թիվ է մեծ է քան (2․53-1) 
            Այս թվերը չենք կարող պահպանել number տիպերին մեջ 
        </p>
        <p>
            Շատ հաճախ բավական է անվտանգ միջակայքը թվերի սկսված -(2,53-1) մինչև (2,53-1)
            բայց կան դեպքեր որ մեզ պետք է ավելի մեծ թվեր 
        </p>
        <p>
        BigInt տիպը ավելացվել է  JavaScript ում որպիզի մեզ թույլ տա աշխատել նման իրավիճակներում 
        որպիսզի ստեղծենք BigInt տիպը պարտադիր է թվերի վերջում գրել n օրինակ
        </p>
        <img src={seven} />
        <h3>Տողային տիպեր</h3>
        <p>
        Տողային տիպերը JavaScript ում պետք է լինեն չակերտների մեջ 
        </p>
        <img src={eane} />
        <p>
        JavaScript ում չակերտները լինում են 3 ձևի 
        1, եկրկուական չակերտները "Привет"
        2, մեկական չակերտները 'Привет'
        3, թեք չակերտները `Привет`
        </p>
        <p>
            մեկական և եկրկուական չակերտները համարվում են սովորական նրանց մեջ չկա տարբերություն
            թեք չակերտները թույլեն տալիս իրենց մեջ գրել ֆունկցիոնալ արտահայտություն որը գրվում է ${} մեջ օրինակ 
        </p>
        <img src={nane} />
        <p>
        ${} մեջի ֆունկցիոնալը դառնում է տողի մաս մենք այնտեղ կարողենք գրել ցանկացած բան
        օրինակ name կամ 1+3
        </p>
        <h3>Boolean (բուլյան) տիպ </h3>
        <p>
        Boolean (բուլյան) տիպերը ընդունումեն երկու արժեք միայն true (իրական) և false (կեղծ).
        այս տիպը իր մեջ պահպանում է այո կամ ոչ true նշանակում է այո իսկ false ոչ 
        </p>
        <img src={one1} />
        Boolean (բուլյան) տիպերը կարողեն լինել նաև համեմատության արդյունք
        <img src={one2} />
        <h3>null արժեքը</h3>
        <p>nullը հատուկ տիպ է որը կապ չունի վերևում գրված ոչ մի տիպի հետ 
            սա հատուկ տիպ է որը պահպանում է միայն null արժեքը
        </p>
        <img src={one3} />
        <p>
            JavaScript ում  nullը չի համարվում հղում դեպի գոյություն չունեցող օբյեկտ կամ զրոյական ցուցիչ
            ինչպես մի շարք այլ լեզուներում 
            Սա ուղղակի հատուկ արժեք է որը իրենից ներկայացնում է ոչինչ դատարկություն կամ արժեքը հայտնի չէ 
        </p>
        <h3>Undefined Արժեքը </h3>
        <p>
        Undefined հատուկ արժեքը միայն պատկանում է ինքն իրեն ինչպես null ը 
        նա նշանակում է որ ոչ մի արժեք հայտարարավծ չէ 
        եթե փոփխականը հայտարարավծ է բայց նրան չի տրվում ոչ մի արժեք այդ դեպքում 
        նրա արժեքը դառնում է Undefined
        </p>
        <img src={one4} />
        <p>
            մենք կարողենք  undefined արժեքը տալ ցանկացած փոփխականի
        </p>
        <img src={one5} />
        <p>
            բայց այդպես անել խորհուրդ չի տրվում 
            Սովորաբար null ը օգտագործվում է փոփխականին վերագրելու որպես դատարկություն
            կամ անհայտ արժեք որպես իսկ undefinedը ստուգելու համար թե փոփխականը նշանակված թէ ոչ 
        </p>
        <h3>Օբյեկտեր և Սիմվոլներ</h3>
        <p>
            Օբյեկտ տիպը յուրահատուկ է 
        </p>
        <p>
            Բոլոր մնացած տիպերը համարվում են պրիմիտիվ  «primitive» տիպեր քանի որ նարանց արժեքները 
            կարողեն լինել հասարակ տիպեր իսկ Օբյեկտները կոչվում են «referance» հղումային տիպեր
            Օբյեկտներում պահպանվում է ավելի բարդ ստրուկտուրա 
            
        </p>
        <p>
            Օբյեկտները զբաղեցնում են կարևոր դեր Ծրագրավորման մեջ 
        </p>
        <p>
            Սիմվոլները օգտագործվում են որպիսզի Օբյեկտներին տանք ունիակալ id
        </p>
        <h3> typeof օպերատորը </h3>
        <p>
        typeof օպերատորը վեադարձնում է արգումենտի արժեքը դա կարող է մեզ պետք գալ երբ մենք ցանակում են ինչոր ստուգում 
        իրակակնցել 
        </p>
        <p>
            Նա ունի երկու գրելաձև
            1, օպերատորի գրելաձևը typeof x.
            2, ֆունկցիայի գրելաձևը typeof(x)
            այլ լեզվով ասած նա աշխատում է փակագծերով կամ առանց դրա 
            տարբերություն չկա
            typeof x կանչը վեադարձնում է տող այն տիպի անունով 
        </p>
        <img src={one6} />
        <p>
            այս նկարի վերջին 3 տողի բացատրությունը 
        </p>
        <b>
            1, Math - ներառուցված օբյեկտ է որը նախատեսված է մաթեմաթիկական գործողություների համար
            2, typeof null վեադարձրած արժեքը հավասար է Օբյեկտի բայց սա typeof ի սխալն է 
            իհարկ է  null չի պատկանում Օբյեկտների տիպին 
            3, typeof alert վեադարձնում է function քանի որ alert համարվում է ֆունկցիա ,
            հտագայում կտեսնենք որ  JavaScript  ում չկա նամն տիպ Ֆունցիա անունով 
            Ֆունկցիաները պատկանում են Օբյկետների տիպին
        </b>
    </div>
  )
}

export default DataTypes