import React from 'react'
import one from "./img/1.jpg"
import two from "./img/2.jpg"
import tree from "./img/3.jpg"
import fore from "./img/4.jpg"
import fife from "./img/5.jpg"
import sex from "./img/6.jpg"
import seven from "./img/7.jpg"
import ene from "./img/8.jpg"
import nane from "./img/9.jpg"
import ten from './img/10.jpg'
import one1 from "./img/11.jpg"
import one2 from "./img/12.jpg"
import one3 from "./img/13.jpg"
import one4 from "./img/14.jpg"
import one5 from "./img/15.jpg"
import one6 from "./img/16.jpg"
import one7 from "./img/17.jpg"
import one8 from "./img/18.jpg"
import one9 from "./img/19.jpg"
import i from "./img/20.jpg"
import d from "./img/21.jpg"
import i1 from "./img/22.jpg"
import i2 from "./img/23.jpg"
import i3 from "./img/24.jpg"
import i4 from "./img/25.jpg"
import i5 from "./img/26.jpg"
function OperatorsMathematics() {
  return (
    <div>
      <h1>Մաթեմատիկաան Հիմնական Օպերատորներ</h1>
      <p>
        որոշ Օպերատորներ մեզ ծանոթեն դպրոցից Գումարում + Բազմապատկում * Հանում - և այլն
      </p>
      <h3>«Ունարնի», «Բինարնի», «Օպերանդ» Տերմինները </h3>
      <p>
        մինչ անցնելը առաջ եկեք հասկանաք այս տերմինները
      </p>
      <p>«Օպերանդ» - դա նայէ ինչը կապվում է օպերատորին Օրինակ բազմապատկման ժամանակ 5 * 2  կա երկու Օպերանդ
        ձախ կողմի օպերանդը հավասարէ 5 ին իսկ աջ կողմի օպերանդը հավասար է 2 ի, շատ ժամանակ նրանց կոչում են արգումենտներ օպերանդի փոխարեն
      </p>
      <p>
        «Ունարնի» կոչվում է այն օպերատորը որը կիրառվում է միայն մեկ օպերանդի կողմից
        օրինակ «Ունարնի» օպերատոր "-" ը փոխում է թիվը դարձնելով այն բացասական
      </p>
      <img src={one} />
      <p>
        «Բինարնի» կոչվում է այն օպերատորը որը կիրառվում եռկու օպերանդների կողմից նույն "-" ը հադեսե գալիս որպես «Բինարնի» օպերատոր
      </p>
      <img src={two} />
      <p>
        Ձևականորեն, վերջին օրինակներում մենք խոսում ենք երկու տարբեր օպերատորների մասին, որոնք օգտագործում են մեկ նիշ ՝ ժխտման օպերատոր (ունար օպերատոր, որը շրջում է նշանը) և հանման օպերատոր (երկուական օպերատոր, որը մեկ թիվը հանում է մյուսից):
      </p>
      <h3>Մաթեմատիկա</h3>
      <p>
        JavaScript ը իր մեջ ունի հետևյալ Մաթեմատիկաան օպերատորները
      </p>
      <ul>
        <li>Գումարում +</li>
        <li>Հանում - </li>
        <li>Բազմապատկում * </li>
        <li>Բաժանում </li>
        <li>Բաժանումից մնացորդ վերցնելը %</li>
        <li>Աստիճանի բարձրացում **</li>
      </ul>
      <p>
        առաջին 4 օպերատորները պարզեն իսկ % և ** օպերատորների մասին մի քանի խոսք
      </p>
      <h3>Բաժանումից մնացորդ վերցնելը %</h3>
      <p>
        Բաժանումից մնացորդ վերցնելը օպերատորը % չնայած իր նշանակությանը ոչ մի կապ չունի տոկոսների հետ
        a % b արդյունքը դա ամբողջ թվերի բաժանման մնացորդն է a % b
        Օրինակ:
      </p>
      <img src={tree} />
      <h3>Աստիճանի բարձրացում **</h3>
      <p>
        a ** b արտահայտության մեջ բարձրացման օպերատորը ** բազմապատկում է a-ն ինքնին b անգամ:

        Օրինակ:

      </p>
      <img src={fore} />
      <p>
        Մաթեմատիկորեն, օպերատորը գործում է նաև ոչ ամբողջ թվերի համար: Օրինակ, քառակուսի արմատը 1/2 Աստիճանի բարձրացում է:
      </p>
      <img src={fife} />
      <h3>Տողային տիպերի գումարում ը «Բինարնի» + շնորհիվ</h3>
      <p>
        Եկեք ուսումնասիրենք JavaScript ում հատուկ հնսրավորությունները որոնք դուրսեն գալսի դպրոցի անցածից
      </p>
      <p>
        սովորաբար գումարման օպերատորի օգնությամնբ գումարվում են թվերը '+'
      </p>
      <p>
        բայց եթե «Բինարնի» օպերատոր '+' օգտագործվում է տողային տիպերում այն երկու տողերը միացնում է իրար
      </p>
      <img src={sex} />
      <p>
        Ուշադրություն դարձրեք այն փաստին որ եթե նույնիսկ մի օպերանդը իրենից տողային տիպե ներկայացնում ապա երեկրորդը նույնպես կդառնա տողային տիպ

      </p>
      <img src={seven} />
      <p>
        ոնց տեսնում եք կարևոր չէ առաջին օպերանդն է տող թե երեկրորդ
      </p>
      <img src={ene} />
      <p>
        այստեղ օպերատորները աշխատում են մեկը մյուսի հետևից Առաջին + գումարում է
        երկու թվերը  և վերադարձնում է 4 հետո հաջորդ + միավորումա արդյունքը դարձնելով այն տողային տիպ
        4 + '1' = '41'.
        տողերի միավորումը դա միայն հնարավոր է «Բինարնի» + օպրատորի շնորհիվ մնացած բոլոր թվաբանական
        օպերատորները աշխատում են միայն թվերի հետ և միշտ օպերանդները վերածում են թվի
        օրինակ հանման և Բաժանման օպերատորները
      </p>
      <img src={nane} />
      <h3>Թվային տիպի անցումը «Ունարնի» + օգնությամբ</h3>
      <p>
        գոյություն ունի երկու + ձև, «Բինարնի» որը մենք օգտագործեցինք վերևում և «Ունարնի»
        «Ունարնի» այսինքն երբ այն կիրառվում է մի օպերատոի համար + գումարումը ոչինչ չի անում թվերի հետ բայց
        եթե օպերանդը թիվ չէ այն դարձնում է թիվ
        օրինակ
      </p>
      <img src={ten} />
      <p>
        այս մոտեցումը նույն բանն է ինչ Number(...) ֆունկցիան ուղակի ավելի կարճ գրելաձևով

      </p>
      <p>
        Տողերը թվերի վերածելու անհրաժեշտությունը շատ հաճախ է առաջանում
        օրինակ HTML-ֆորմաների մեջ պահպանվումեն միայն տողեր
        Իսկ օրինակ եթե մեզ հարկավոր է այդ արժեքները բաժանել
      </p>
      <p>
        «Բինարնի»  + ը նրանց կգումարի որպես տեքստ
      </p>
      <img src={one1} />
      <p>
        Դրա համար օգտագործվում է «Ունարնի» + ը որպիսզի այն վերածենք թվի
      </p>
      <img src={one2} />
      <p>
        Մաթեմատիկա տեսանկյունից սա համարվում է վախենալու,
        բայց Ծրագրավորողի տեսանկյունից սա համարվում է նորմալ երևույթ
        սկզբում կկատարվեն «Ունարնի» Գումարում ները որոնք տողային տիպը կսարքեն թվային տիպ իսկ հետո
        կկատարվի «Բինարնի» գումարումը որը կգումար այդ երկու թվերը
      </p>
      <h3>Օպերատորների առաջնահերթություն</h3>
      <p>
        Այն դեպքում երբ արտահայտության մեջ առկաէ մի քանի օպերատոր
        նրանց կատարման հերդականությունը տեղի է ունենում Օպերատորների առաջնահերթությամբ
        կամ այլ կերպ ասած գոյություն ունեն օպերատորների կատարման որոշակի կարգ
      </p>
      <p>
        Դպրոցից մեզ հայտի է որ բազմապատկում արտահայտության մեջ 1 + 2 * 2 տեղի կունենա ավելի շուտ քան գումարումը
        սա հենց կոչվում է առաջնահերթություն, որը ասում է բազմապատկումը ունի ավելի բարձր առաջնահերթություն քան գումարում
      </p>
      <p>
        Փակագծերը ավելի կարևոր են քան առաջնահերթությունը, այնպես որ եթե մեզ հարկաոր է
        որպիսզի փոխենք առաջնահերթությունը կարողենք օգտագործել Փակագծերը օրինակ այսսպես (1 + 2) * 2.
      </p>
      <p>
        JavaScript ում կան շատ Օպերատորներ ամեն մեկը ունի իր առաջնահերթություն թիվը
        այն օպերատոր որի թիվը ավելի բարձր է այն կկատարվի առաջինը  եթե այդ թվերը
        հավասար են ապա այդ դեքում գործողությունը տեղի կունենա ձախից աջ
      </p>
      <p>
        Ներքև ի նկարում առաջնահերթություն աղյուսակն է Ուշադրություն դարձրեք այն փաստին որ «Ունարնի» օպերատորը ունի ավելի բարձր առաջնահերթություն քան նույն «Բինարնի» օպերատորը
      </p>
      <img src={one3} />
      <p>
        Այնպես որ «Ունարնի» գումարումը ունի 15 առաջնահերթությունը որը ավելի բարձր է քան «Բինարնի» որը 12 է
        "+apples + +oranges" արտահայտության մեջ առաջինը կկատարվի «Ունարնի» գումարումը հետո նոր «Բինարնի» ն
      </p>
      <h3>Վերագրում</h3>
      <p>
        եկեք նկատենք որ առաջնահերթություն աղյուսակում առակա է նաև  Վերագրման օպերատորը =
        որը ունի ամնափոքր առաջնահերթությունը 2
        այդ իսկ պատճառով երբ փոփխականին ինչ որ բան է Վերագրվում օրինակ x = 2 * 2 + 1
        առաջինը կատարվում է Մաթեմատիկա գործողությունները իսկ հետո տեղի կունենա Վերագրումը
        x փոփխականին մեջ
      </p>
      <img src={one4} />
      <h3>Վերագրումը = վերադարձնում է արժեք</h3>
      <p>
        այն փաստը որ իրենից ներկայացնում է օպերատոր ունի հետքրքիր հետեւանքները
        օպերատորների մեծ մասը լեզվում վերադարձնում է արժեք Վերագրման օպերատորը բացառություն չէ
        x = value կանչը Վերագրում է  value ին x մեջ և վերադարձնում նրան
        սրա օգնությամբ կարողենք կատարել ավելի բարդ գործողություններ
      </p>
      <img src={one5} />
      <p>
        Վերևի օրինակում (a = b + 1) այս արտահայտության արժեքը կլինի վերագրված a փոփխականին մեջ
        այսինքն 3 հետ այն օգտագործվում է հետագա հաշվարկի համար
      </p>
      <p>
        Հանձնարարության զվարճալի կիրառում, այնպես չէ: Մենք պետք է հասկանանք, թե ինչպես է դա գործում, քանի որ երբեմն դա կարելի է տեսնել JavaScript գրադարաններում:
      </p>
      <p>
        բայց նման կոդը խարհուրդ չի տրվում օգտագործել կոդում
      </p>
      <h3>
        Շղթայական վերագրում
      </h3>
      <img src={one6} />
      <p>
        այս վերագրումը աշխատում է աջից ձախ
        առաջինը կաշխատի ամենաԱջ կողմի գործողությունը 2 + 2
        և հետո արդյունքը կվերագրվի աջից ձախ c, b и a
        Վերջում այս փոփխականների բոլորի արժեքը կլինի նույնը
      </p>
      <h3>Կրճատված թվաբանությունը վերագրումով</h3>
      <p>
        Հաճախ անհրաժեշտ է դիմել փոփոխականին օպերատորին վրա և արդյունքը պահպանել դրանում:
      </p>
      <img src={one7} />
      <p>
        այս գործողությունը կարելի է կրճտել օգտագործելով նորագույն գրելաձևը += և *=:
      </p>
      <img src={one8} />
      <p>
        նման կրճատ գրելաձևը կարելի է օգտագործել ցանկացած օպերատոի հետ /=, -= և այլն
        վերագրման կանչը ունի նույն առաջնահերթությունը ինչ  ինչպես սովորականը այսինքն կկարարվի
        այլ գործողություններից հետո
      </p>
      <img src={one9} />
      <h3>Ինկրեմենտ և Դեկրեմենտ</h3>
      <p>
      Ամենատարածված թվային գործողություններից մեկը թիվը մեկով ավելացնելըէ կամ նվազացնելն է:
      </p>
      <p>
      այս գործողությունների համար նույնիսկ գոյություն ունի հատուկ օպերատորներ 
      </p>
      <h3>Ինկրեմենտ ++ մեծացնում է փոփխականին արժեքը մեկով</h3>
      <img src={i} />
      <h3>Դեկրեմենտ -- փոքրացնում է փոփխականին արժեքը մեկով</h3>
      <img src={d} />
      <p>
        Կարևոր է իմանալ որ Ինկրեմենտ  և Դեկրեմենտ կարողենք օգտագործել միայն փոփխականների նկատմամբ 
        եթե փորձենք այն կիրառել արժեքի վրա օրինակ 5++ այն կհանգեցնի սխալի 
      </p>
      <p>++ և -- օպերատորները կարողենք տեղադրել ոչ միայն փոփխականին վերջում այլ նաև նրանից առաջ </p>
      <ul>
        <li> երբ օպերատորը դրվում է փոփոխականից հետո - դա կոչվում է հետֆիքս ձևը counter++.</li>
        <li> երբ օպերատորը դրվում է փոփոխականից առաջ - դա կոչվում է նախաֆիքս ձևը ++counter.</li>
      </ul>
      <p>
        այս երկու օպերատորները կատարում են նույն գործողությունը ավելացնում են counter ը 1
      </p>
      <p>
        բայց կա արդյոք տարբերություն նրանց մեջ Իհարկե կա բայց այն կարողենք տեսնել երբ օգտագործենք արժեք որը վերադարձնում է ++/-- օպերատորները
      </p>
      <p>
        եկեք հասկանանք այս պահը Ինչպես գիտենք բոլոր օպերատորներ վերադարձնում են 
        արժեք Օպերատորներ Ինկրեմենտ և Դեկրեմենտ ը նույնպես բացառություն չեն կազմում 
        նախաֆիքս ձևը վերադարձնում է նոր արժեք իսկ հետֆիքս ձևը վերադարձնում է հին արժեքը նախքան
        մեծացնելը կամ փոքրացնելը արժեքը
      </p>
      <p>Սեսեք օրինակը</p>
      <img src={i1} />
      <p>
      (*) այս տողում նախաֆիքս ձևը ++counter մեծացնում է counter ի արժեքը և վերադարձնում է նոր արժեքը 2
      դրա համար alert ցույց կտա 2
      </p>
      <p>
հիմա եկենք տեսնենք հետֆիքս ձևը 
      </p>
      <img src={i2} />
      <p>
      (*) այս տողում հետֆիքս ձևը counter++ նույնպես մեծացնում է counter ի արժեքը բայց վերադարձնում է հին արժեքը որը առկա էր մինչ այս գործողությունը 
      այնպես որ alert  ցույց կտա 1
      </p>
      <p>
        Եթե օպերատորի արդյունքը չի օգտագործվում այլ միայն պետքէ մեծացնելը կամ փոքրացնել փոփոխականը այն
        ապա կերևոր չե թե որ ձևը կոգտագործեք 
      </p>
      <img src={i3} />
      <p>
        եթե ցանկանում եք միանգամից օգտագործել արդյունքը ապա կիրառեք նախաֆիքս ձևը ++counter
      </p>
      <p>
        իսկ եթե պետք է մեծացնել և ստանալ արժեքը մինչ այն մեծացնելը օգտագործեք հետֆիքս ձևը counter++
      </p>
      <p>
        Ինկրեմենտ և Դեկրեմենտ կարելի է օգտագործել ցանկացած արտահայտության մեջ 
        նրանց առաջնահերթությունը ավելի բարձր է քան մի շարք այլ Մաթեմատիկա օպերատորների արժեքը
      </p>
      <img src={i4} />
      <h3>Բիթ օպերատորներ</h3>
      <p>
      Բիթային օպերատորներն աշխատում են 32-բիթանոց ամբողջ թվերի հետ (անհրաժեշտության դեպքում հանգեցնում են դրանց) ՝ իրենց ներքին երկուական ներկայացման մակարդակում
      </p>
      <p>
      Այս հայտարարությունները JavaScript-ին հատուկ բան չեն, դրանք աջակցվում են ծրագրավորման լեզուների մեծ մասում:
      </p>
      <ul>
        <li>AND(и) ( & )</li>
        <li>OR(или) ( | )</li>
        <li>XOR(побитовое исключающее или) ( ^ )</li>
        <li>NOT(не) ( ~ )</li>
        <li>LEFT SHIFT(левый сдвиг)   </li>
        <li>RIGHT SHIFT(правый сдвиг) </li>
        <li>ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями)</li>
      </ul>
      <p>
      Դրանք հազվադեպ են օգտագործվում, երբ անհրաժեշտ է գործել թվերի հետ շատ ցածր (բիթ) մակարդակում: Մոտ ժամանակներս դրանք մեզ պետք չեն, քանի որ վեբ մշակողները հազվադեպ են դիմում դրանց, չնայած որոշ ոլորտներում (օրինակ ՝ գաղտնագրության մեջ) դրանք օգտակար են: Կարող եք կարդալ դրանց մասին բաժինը MDN-ում, երբ իրական անհրաժեշտություն առաջանա:
      </p>
      <h3>Ստորակետի օպերատորը </h3>
      <p>
      Ստորակետի օպերատորը շատ հաճախ օգտագործվողներից մեկն է (,) և այն նաև հանդիսանում է յուրահատուկ 
      այն հիմնականում օգտագործում ենք որպիսզի կրճատենք կոդը 
      </p>
      <p>
      Ստորակետի օպերատորը մեզ հնարավորությունն է տալիս օգտագործել մի քանի արտահայտության որը իրաիղ կբաժանվի , բոլոր 
      արտահայտությանները կկատարվեն բայց վերադարձրված արդյունքը կլինի միայն վերջինը 
      </p>
      <img src={i5} />
      <p>
        առաջին արտահայտությանը 1 + 2 կկատարվի բայց արդյունքը կմերժվի ,
        հետո գալիսե  3 + 4 որը կատարվում է և արդյունքը վերադարձնում է 
      </p>
      <p>
        Ուշադրություն դարձրեք այն հանգամանքին որ Ստորակետի օպերատորը ունի 
        ավելի քիչ առաջնահերթություն ավելի ցածր քան  = -ը, դրա համար Փակագծերը կարևորեն վերևում գրած օրինակում 
        Առանց նրանց a = 1 + 2, 3 + 4 առաջինը կկատարվի + թվերի գումարումը a = 3, 7
        հետո կաշխատ վերագրման = օպերատորը a = 3 իսկ հետո մնացած բոլոր գործողությունները կանտեսվեն 
      </p>
    </div>
  )
}

export default OperatorsMathematics